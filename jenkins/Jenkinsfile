pipeline {
    agent {
        // Ejecuta la etapa en cualquier agente que tenga la etiqueta 'docker'
        // y pueda ejecutar comandos Docker.
        label 'agent-jenkins-java-21'
    }
    environment {
        CONTAINER_NAME = "${env.JOB_NAME.toLowerCase().replaceAll('[^a-z0-9-]', '-')}"
    }

    stages {

        stage('Build Docker Image') {
            steps {
                script {
                    echo "--- Unstashing artifacts ---"
                    unstash 'quarkus-app'

                    def localImageName = "${CONTAINER_NAME}:latest"

                    echo "--- Building Local Docker Image: ${localImageName} ---"
                    sh "docker build -t ${localImageName} ."
                    echo "--- Docker image built successfully! ---"
                }
            }
        }

        // Stage D: Deploy the application as a Docker container.
        stage('Deploy Application') {
            steps {
                script {
                    def imageName = "${CONTAINER_NAME}:latest"

                    echo "--- Deploying container: ${CONTAINER_NAME} ---"
                    // Stop and remove the old container if it exists to avoid conflicts.
                    sh "docker stop ${CONTAINER_NAME} || true"
                    sh "docker rm ${CONTAINER_NAME} || true"

                    // Run the new container.
                    sh """
                    docker run -d \\
                        --name ${CONTAINER_NAME} \\
                        -p 8080:9000 \\
                        --restart always \\
                        ${imageName} \\
                        --network general-network
                    """
                    echo "--- Deployment completed! ---"
                }
            }
        }
    }

    // Post-build actions that run after all stages are completed.
    post {
        // This block runs always, regardless of the pipeline's success or failure.
        always {
            echo "--- Cleaning up the workspace ---"
            deleteDir()
        }
    }
}